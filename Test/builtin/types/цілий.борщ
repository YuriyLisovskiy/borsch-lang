// Тестування арифметичних операторів
припустити(1 + 2 == 3, "оператор суми впав");
припустити(2 + 0 == 2, "оператор суми впав");
припустити(0 + 2 == 2, "оператор суми впав");
припустити(-2 + 1 == -1, "оператор суми впав");
припустити(-3 + 7 == 4, "оператор суми впав");

припустити(1 - 2 == -1, "оператор різниці впав");
припустити(2 - 0 == 2, "оператор різниці впав");
припустити(0 - 2 == -2, "оператор різниці впав");
припустити(2 - 1 == 1, "оператор різниці впав");
припустити(3 - 7 == -4, "оператор різниці впав");

припустити(1 / 2 == 0.5, "оператор частки впав");
припустити(0 / 2 == 0, "оператор частки впав");
припустити(2 / 1 == 2, "оператор частки впав");
припустити(3 / 7 == 0.42857142857142855, "оператор частки впав");
припустити(-3 / 7 == -0.42857142857142855, "оператор частки впав");
припустити(2 / -5 == -0.4, "оператор частки впав");

припустити(1 * 2 == 2, "оператор добутку впав");
припустити(2 * 0 == 0, "оператор добутку впав");
припустити(0 * 2 == 0, "оператор добутку впав");
припустити(2 * 1 == 2, "оператор добутку впав");
припустити(3 * 7 == 21, "оператор добутку впав");
припустити(-3 * 7 == -21, "оператор добутку впав");
припустити(2 * -5 == -2 * 5, "оператор добутку впав");

припустити(5 % 2 == 1, "оператор пошуку за модулем впав");
припустити(5 % 1 == 0, "оператор пошуку за модулем впав");
припустити(5 % 5 == 0, "оператор пошуку за модулем впав");
припустити(0 % 5 == 0, "оператор пошуку за модулем впав");
